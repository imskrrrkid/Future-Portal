// Select elements from the DOM
const userName = document.querySelector("#username");
const email = document.querySelector("#email");
const subBtn = document.querySelector("#sub-btn");
const checkBox =document.querySelector("#agreetoall")
const textArea =document.querySelector("#textareas")
const canvas = document.querySelector("#text-canvas");
const ctx = canvas.getContext("2d");


// Default Values
subBtn.disabled = true;
subBtn.style.backgroundColor = "gray";
subBtn.style.cursor = "not-allowed";
checkBox.checked = false;



// Message form placeholder slids
const textSlide = () => {
    let messages = ["Tell me something about you!", "How's your day?", "Minimum 50 words!" ,"Keep typing...", "Something wrong?", "Dont shout at me!!!!"];
    let index = 0;

    setInterval(() => {
        textArea.placeholder = messages[index];
        index = (index + 1) % messages.length; // 
    }, 4000); 
};
textSlide();


// checks title (username) and email along 50 char of text with checkbox is met the req.
const fourCheck = () => {
  if (
    userName.value.trim() !== "" &&
    email.value.trim() !== "" &&
    textArea.value.trim().length > 50 &&
    checkBox.checked
  ) {
    subBtn.disabled = false;
    subBtn.style.backgroundColor = "black";
    subBtn.style.cursor = "pointer";
  } else {
    subBtn.disabled = true;
    subBtn.style.backgroundColor = "gray";
    subBtn.style.cursor = "not-allowed";
  }
};

// calls fourcheck fun when inputs changes
userName.addEventListener("input", fourCheck);
email.addEventListener("input", fourCheck);
textArea.addEventListener("input", fourCheck);
checkBox.addEventListener("change", fourCheck);

// Create Text File and save at local Storage
// subBtn.addEventListener('click', () => {
//     // const userName = document.getElementById('username').value.trim();
//     // const email = document.getElementById('email').value.trim();
//     // const textArea = document.getElementById('textareas').value.trim();

//     if (!userName || !email || !textArea) {
//         alert("All fields are required!");
//         return;
//     }

//     const data = `Username: ${userName.value}\nEmail: ${email.value}\nMessage: ${textArea.value}\nAgreement: ${checkBox.checked}\n`;

//     const blob = new Blob([data], { type: 'text/plain' });
//     const link = document.createElement('a');
//     link.href = URL.createObjectURL(blob);
//     link.download = `${userName.value}.txt`;
//     link.click();

//     URL.revokeObjectURL(link.href); // Clean up
// });



// Image creater Generated by ChatGPT
const downloadAsImage = () => {
  // Set canvas width
  canvas.width = 1024;
  
  // Set the initial canvas height
  const baseHeight = 720; // Initial height
  const lineHeight = 30; // Height of each line
  let yPosition = 50; // Start position for text
  const padding = 20; // Padding from the canvas edges

  // Estimate number of lines to determine the required canvas height
  let lineCount = 3; // Username, email, and agreement, each on one line
  const lines = textArea.value.split('\n');
  lineCount += lines.length; // Add the lines from the message

  // Calculate the required canvas height based on the number of lines
  let requiredHeight = baseHeight + (lineCount * lineHeight);

  // Set the canvas height dynamically based on content
  canvas.height = requiredHeight;

  // Set background color
  ctx.fillStyle = "white";
  ctx.fillRect(0, 0, canvas.width, canvas.height);

  // Set text styles
  ctx.fillStyle = "black";
  ctx.font = "20px Arial";
  ctx.textAlign = "center";

  // Function to wrap text to fit within canvas width
  const wrapText = (text, x, y, maxWidth) => {
    const words = text.split(' ');
    let line = '';
    const lines = [];

    words.forEach(word => {
      const testLine = line + word + ' ';
      const testWidth = ctx.measureText(testLine).width;
      
      if (testWidth > maxWidth && line !== '') {
        lines.push(line);
        line = word + ' ';
      } else {
        line = testLine;
      }
    });
    
    // Add the last line
    lines.push(line);

    // Draw each line
    lines.forEach(line => {
      ctx.fillText(line, x, y);
      y += lineHeight;
    });

    return y; // Return updated y position
  };

  // Write Username, Email, and Agreement (Single-line text)
  ctx.fillText(` ${userName.value}`, canvas.width / 2, yPosition);
  yPosition += lineHeight;

  ctx.fillText(` ${email.value}`, canvas.width / 2, yPosition);
  yPosition += lineHeight;
  ctx.fillText(`23/12/2024 @ 04:44 PM`, canvas.width / 2, yPosition);
  yPosition += lineHeight;
  
  // Wrap and draw the message content (multi-line text)
  lines.forEach((line) => {
    if (yPosition < canvas.height - padding) { // Check if we still have space
      yPosition = wrapText(line, canvas.width / 2, yPosition, canvas.width - padding * 2);
    } else {
      // If there's no space left, stop drawing and show a message
      ctx.fillText("Message overflowed. Text too long to display.", canvas.width / 2, yPosition);
      return;
    }
  });
  // ctx.fillText(`Agreement: ${checkBox.checked ? "Yes" : "No"}`, canvas.width / 2, yPosition);
  // yPosition += lineHeight;
 
  
  // Download the image
  const image = canvas.toDataURL("image/png");
  const link = document.createElement("a");
  link.href = image;
  link.download = `${userName.value || "default"}.png`;
  link.click();
};


// Event Listener
subBtn.addEventListener("click", downloadAsImage);